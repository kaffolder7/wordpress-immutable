name: Build, Scan with Trivy, and Push Docker images (app + vendor)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
    paths:
      - "app.Dockerfile"
      - "builder/**"
      - "php/**"
      - "mu-plugins/**"
      - ".github/workflows/build-images.yml"
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  packages: write
  security-events: write   # needed to upload SARIF

jobs:
  build-scan-push:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_OWNER: ${{ github.repository_owner }}
      APP_IMAGE: ghcr.io/${{ github.repository_owner }}/wordpress-immutable
      BUILDER_IMAGE: ghcr.io/${{ github.repository_owner }}/wp-vendor-builder

    steps:
      - uses: actions/checkout@v4.2.2

      - name: Login to GHCR
        uses: docker/login-action@v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Buildx (docker-container driver)
        uses: docker/setup-buildx-action@v3.11.1
        with:
          install: true
          driver: docker-container

      # ---------- Build locally (scanable) ----------
      # Use --load (single-arch) so Trivy can scan the local image tag.
      - name: Build app image (scan target)
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          file: ./app.Dockerfile
          tags: app:scan
          load: true          # builds a local image named app:scan

      - name: Build vendor builder image (scan target)
        uses: docker/build-push-action@v5.3.0
        with:
          context: ./builder
          file: ./builder/Dockerfile
          tags: builder:scan
          load: true

      # ---------- Trivy scans (fail on High/Critical) ----------
      - name: Trivy scan (app)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: app:scan
          format: sarif
          output: trivy-app.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 1
          timeout: '5m'

      - name: Upload SARIF (app)
        uses: github/codeql-action/upload-sarif@v3.26.11
        with:
          sarif_file: trivy-app.sarif
          category: trivy-app
          wait-for-processing: true

      - name: Trivy scan (vendor builder)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: builder:scan
          format: sarif
          output: trivy-builder.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 1
          timeout: '5m'

      - name: Upload SARIF (vendor builder)
        uses: github/codeql-action/upload-sarif@v3.26.11
        with:
          sarif_file: trivy-builder.sarif
          category: trivy-builder
          wait-for-processing: true

      - name: Resolve base image digest (WordPress)
        id: base
        run: |
          REF="wordpress:6.8.3-php8.3-apache"
          # Get the multi-arch manifest digest for the tag
          DIGEST="$(docker buildx imagetools inspect "$REF" | awk '/Digest:/ {print $2; exit}')"
          echo "ref=$REF" >> "$GITHUB_OUTPUT"
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
          echo "Base image pinned: $REF@$DIGEST"

      - name: Read CF IPs generated timestamp
        id: cf
        shell: bash
        run: |
          ts="$(grep -m1 -E '^# Generated:' apache/remoteip-cloudflare.conf | sed 's/^# Generated: //')"
          echo "ts=$ts" >> "$GITHUB_OUTPUT"

      - name: Compute created timestamp
        id: created
        run: echo "ts=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> "$GITHUB_OUTPUT"

      # ---------- If scans pass, build multi-arch & push ----------
      - name: Extract app metadata
        id: meta_app
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ env.APP_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=wordpress-immutable
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.created.outputs.ts }}
            org.opencontainers.image.base.name=${{ steps.base.outputs.ref }}
            org.opencontainers.image.base.digest=${{ steps.base.outputs.digest }}

      - name: Build & push app image (multi-arch)
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          file: ./app.Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            BASE_IMAGE=${{ steps.base.outputs.ref }}@${{ steps.base.outputs.digest }}
            CF_IPS_TS=${{ steps.cf.outputs.ts }}
          tags: ${{ steps.meta_app.outputs.tags }}
          labels: ${{ steps.meta_app.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Extract vendor builder metadata
        id: meta_builder
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ env.BUILDER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=wp-vendor-builder
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.created.outputs.ts }}

      - name: Build & push vendor builder image (multi-arch)
        uses: docker/build-push-action@v5.3.0
        with:
          context: ./builder
          file: ./builder/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta_builder.outputs.tags }}
          labels: ${{ steps.meta_builder.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true